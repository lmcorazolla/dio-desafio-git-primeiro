# Collection
* Collection é um objeto que agrupa múltiplos elementos (variáveis primitivas ou objetos) dentro de uma única unidade.
* serve para armazenar e processar conjuntos de dados de forma eficiente.
* Antes do Java 2, a implementação de coleçoes na linguagem Java incluía poucas classes e não tinha a organização de um framework

# Composição Collection
* Interfaces: é um contrato que quando assumido por uma classe deve ser implementado.
* Implementações ou Classes: são as materializações, a codificação das interfaces.
* Algoritmos: É uma sequência l[ogica, finita e definida de instruções que devem ser seguidas para resolver um problema.

## java.util.List
* Elementos duplicados e garante ordem de inserção
* "ArrayList deve ser usado onde mais operações de pesquisa são necessárias, e LinkedList deve ser usado onde mais operações de inserção e exclusão são necessárias."

### Interface Comparable

## Coleções singulares: Set
java.util.Set
* Não permite elementos duplicados
* Não possui índice

## Maps
java.util.Map
* Elementos únicos (key) para cada valor (value)

## Streams

### Classe anônima
A classe anônima em Java é uma classe que não recebeu um nome e é tanto declarado e instanciado em uma única instrução. Você deve considerar o uso de uma classe anônima sempre que você precisa para criar uma classe que será instanciada apenas uma vez.

### Functional INterface
Qual interface com um SAM (single abstract method) é uma interface funcional e sua implementação pode ser tratada como expressões lambda
* Comparator
* Comsumer
* Function
* Predicate

### Lambda
Uma função lambda é uma função sem declaração, isto é, não é necessário colocar um nome, um tipo de retorno e o modificador de acesso. A ideia é que o método seja declarado no mesmo lugar em que será usado. As funções lambda em Java tem a sintaxe definica como:
(argumento) -> (corpo)

### Reference Method
Method Reference é um novo recurso do Java 8 que permite fazer referência a um étodo ou construtor de uma classe (de forma funcional) e assim indicar que ele deve ser utilizado num ponto específico do código, deixando-o mais simples e legível. Para utilizá-lo, basta informar uma classe ou referência seguida do símbolo "::" e o nome do método sem os parênteses no final.

### Stream API
A Streams API traz uma nova opção para a manipulação de coleções em Java seguindo os princípios da programação funcional. Combinada com as expressões lambda, ela proporciona uma forma diferente de lidar com conjuntos de elementos, oferecendo ao desenvolvedor uma maneira simples e concisa de escrever código que resulta em facilidade de manutenção e paralelização sem efeitos indesejados em tempo de execução. 

